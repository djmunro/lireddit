{"ast":null,"code":"var _jsxFileName = \"/Users/david/ABC/P/Projects/react-clone/lireddit-web/src/components/InputField.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nimport { FormControl, FormLabel, Input, FormErrorMessage } from \"@chakra-ui/core\";\nimport { useField } from \"formik\";\nexport const InputField = ({\n  label,\n  props\n}) => {\n  const [field, {\n    error\n  }] = useField(props);\n  return __jsx(FormControl, {\n    isInvalid: !!error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: field.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, label), __jsx(Input, _extends({}, field, props, {\n    id: field.name,\n    placeholder: props.placeholder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  })), error ? __jsx(FormErrorMessage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 16\n    }\n  }, error) : null);\n};","map":{"version":3,"sources":["/Users/david/ABC/P/Projects/react-clone/lireddit-web/src/components/InputField.tsx"],"names":["React","FormControl","FormLabel","Input","FormErrorMessage","useField","InputField","label","props","field","error","name","placeholder"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAA2C,OAA3C;AACA,SACEC,WADF,EAEEC,SAFF,EAGEC,KAHF,EAIEC,gBAJF,QAKO,iBALP;AAMA,SAASC,QAAT,QAAyB,QAAzB;AAOA,OAAO,MAAMC,UAAqC,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAsB;AACzE,QAAM,CAACC,KAAD,EAAQ;AAAEC,IAAAA;AAAF,GAAR,IAAqBL,QAAQ,CAACG,KAAD,CAAnC;AACA,SACE,MAAC,WAAD;AAAa,IAAA,SAAS,EAAE,CAAC,CAACE,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAW,IAAA,OAAO,EAAED,KAAK,CAACE,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiCJ,KAAjC,CADF,EAEE,MAAC,KAAD,eACME,KADN,EAEMD,KAFN;AAGE,IAAA,EAAE,EAAEC,KAAK,CAACE,IAHZ;AAIE,IAAA,WAAW,EAAEH,KAAK,CAACI,WAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF,EAQGF,KAAK,GAAG,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmBA,KAAnB,CAAH,GAAkD,IAR1D,CADF;AAYD,CAdM","sourcesContent":["import React, { InputHTMLAttributes } from \"react\";\nimport {\n  FormControl,\n  FormLabel,\n  Input,\n  FormErrorMessage,\n} from \"@chakra-ui/core\";\nimport { useField } from \"formik\";\n\ntype InputFieldProps = InputHTMLAttributes<HTMLInputElement> & {\n  label: string;\n  name: string;\n};\n\nexport const InputField: React.FC<InputFieldProps> = ({ label, props }) => {\n  const [field, { error }] = useField(props);\n  return (\n    <FormControl isInvalid={!!error}>\n      <FormLabel htmlFor={field.name}>{label}</FormLabel>\n      <Input\n        {...field}\n        {...props}\n        id={field.name}\n        placeholder={props.placeholder}\n      />\n      {error ? <FormErrorMessage>{error}</FormErrorMessage> : null}\n    </FormControl>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}